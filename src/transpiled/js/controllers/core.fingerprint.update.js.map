{"version":3,"sources":["../../../js/controllers/core.fingerprint.update.js"],"names":[],"mappings":"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","file":"core.fingerprint.update.js","sourcesContent":["\"use strict\";\n\napp.filter(\"propsFilter\", function() {\n    return function(items, props) {\n        let out = [];\n\n        if (angular.isArray(items)) {\n          items.forEach(function(item) {\n            let itemMatches = false;\n\n            let keys = Object.keys(props);\n            for (let i = 0; i < keys.length; i++) {\n              let prop = keys[i];\n              let text = props[prop].toLowerCase();\n              if (item[prop].toString().toLowerCase().indexOf(text) !== -1) {\n                itemMatches = true;\n                break;\n              }\n            }\n\n            if (itemMatches) {\n              out.push(item);\n            }\n          });\n        } else {\n          // Let the output be the input untouched\n          out = items;\n        }\n\n        return out;\n    };\n})\n\napp.controller(\"CoreFingerprintUpdateCtrl\", [\"$scope\", \"$rootScope\",  \"locker\", \"Fingerprint\", \"$filter\", \"$state\", \"$stateParams\", \"$mdToast\", \"$timeout\",\"Store\",\n  function(                                   $scope,   $rootScope,    locker,   Fingerprint,   $filter,   $state,   $stateParams,   $mdToast,   $timeout,Store) {\n\n    $scope.allData = $rootScope.allData;\n      $scope.allFingerprints = {};\n      $scope.allFingerprints.list = {};\n      $scope.allFingerprints.count = 0;\n      $scope.stores = {};\n    /**\n     * get merchantMe and merchantToken from Locker\n     *\n     */\n    let merchantMe = locker.driver(\"local\").namespace(\"core\").get(\"me\");\n    let merchantToken = locker.driver(\"local\").namespace(\"core\").get(\"merchantToken\");\n    $scope.toggleWizardLoader = {};\n\n      Store.StoreAllData(merchantToken).then(function() {\n          console.log(\" in stores api call\");\n          $scope.stores = Store.getStoreAllData();\n      });\n\n      Fingerprint.FingerprintAllData(merchantToken).then(function() {\n          $scope.allFingerprints = Fingerprint.getFingerprintAllData();\n          $scope.allFingerprints.list = $scope.allFingerprints;\n      });\n    /**\n     * update our fingerprint if fingerprint already exists\n     *\n     * @return {object} updated fingerprint\n     */\n    $scope.updateFingerprint = () => {\n\n\n      let fName                       = $scope.fingerprintData.fingerprint[0].fingerprintName;\n      let merchantId                  = merchantMe.merchantId;\n      let currentFingerprintId        = locker.driver(\"session\").namespace(\"fingerprintCreate\").get(\"activeFingerprintId\");\n      let shouldSaveLocation          = locker.driver(\"session\").namespace(\"fingerprintCreate\").has(\"activeFingerprintLocationId\");\n      let shouldSaveTransaction       = locker.driver(\"session\").namespace(\"fingerprintCreate\").has(\"activeFingerprintTransactionId\");\n      let ShouldSaveSocialTransaction = locker.driver(\"session\").namespace(\"fingerprintCreate\").has(\"activeFingerprintSocialTransactionId\");\n      let ShouldSaveCauseTransaction  = locker.driver(\"session\").namespace(\"fingerprintCreate\").has(\"activeFingerprintCauseTransactionId\");\n      let shouldSaveStoreTransaction  = locker.driver(\"session\").namespace(\"fingerprintCreate\").has(\"activeFingerprintStoreTransactionId\");\n      let shouldSaveBeaconTransaction = locker.driver(\"session\").namespace(\"fingerprintCreate\").has(\"activeFingerprintBeaconTransactionId\");\n      let merchantFingerprintStoreId  = locker.driver(\"session\").namespace(\"fingerprintCreate\").get(\"activeFingerprintStoreTransactionId\");\n      let merchantFingerprintBeaconId = locker.driver(\"session\").namespace(\"fingerprintCreate\").get(\"activeFingerprintBeaconTransactionId\");\n\n\n      /**\n       * this is what we send to the API to update fingerprint if already saved\n       * from create screen.\n       *\n       * @fingerprint  {Object}\n       */\n      let fingerprintInfo = {\n            FingerprintName : $scope.fingerprintData.fingerprint[0].fingerprintName,\n            FingerprintId   : currentFingerprintId,\n            Gender          : $scope.gender.filter,\n            MinAge          : $scope.rangeAge.minAge,\n            MaxAge          : $scope.rangeAge.maxAge,\n            MinIncome       : $scope.rangeIncome.minIncome,\n            MaxIncome       : $scope.rangeIncome.maxIncome,\n            Radius          : $scope.radius.selected.radius,\n            MerchantToken   : merchantToken,\n            MerchantId      : merchantId\n          };\n      console.group(\"current merchant\");\n      console.info(\"current merchant \" + JSON.stringify(merchantMe, null, 4));\n      console.table([merchantMe]);\n      console.groupEnd();\n      Fingerprint.update(fingerprintInfo).then(response => {\n        let statusCode = response.FlikResponse.Status.StatusCode;\n        let statusMessage = response.FlikResponse.Status.StatusMessage;\n        if (statusCode == 0) {\n          let timeNow = moment().format(\"YYYY-MM-DD hh:mm:ss\");\n          let fID     = response.FlikResponse.Data.FingerPrintUpdate.FingerPrintId;\n          // new logic\n          angular.forEach($rootScope.allData.fingerprints.list, function(fingerprint, index){\n            if(fingerprint.fingerprintId == currentFingerprintId){\n              $rootScope.allData.fingerprints.list[index] ={\n                fingerprintId   : fID,\n                fingerprintName : $scope.fingerprintData.fingerprint[0].fingerprintName,\n                gender          : $scope.gender.filter,\n                minAge          : $scope.rangeAge.minAge,\n                maxAge          : $scope.rangeAge.maxAge,\n                minIncome       : $scope.rangeIncome.minIncome,\n                maxIncome       : $scope.rangeIncome.maxIncome,\n                radius          : $scope.radius.selected.radius\n              };\n            }\n          });\n          \n          $scope.updateFingerprintLocation(fID);\n          locker.driver(\"session\")\n            .namespace(\"fingerprintCreate\")\n            .put(\"activeFingerprintId\", fID);\n\n        } else if (statusCode == 1 && statusMessage == \"Fingerprint name already exists\") {\n          $scope.toggleWizardLoader.showLoader = false;\n          $mdToast.show(\n            $mdToast.simple()\n              .content(\"Cannot Update Fingerprint \" + fName + \" Please try from the view/edit screen\")\n              .position(\"top right\")\n              .hideDelay(2700)\n          );\n        } else if (statusCode == 3) {\n          /**\n           * if we reach here merchantToken is no longer valid\n           * we boot user back to signin\n           *\n           * TODO:   =>   add modal to reauth without back to signin page\n           */\n          locker.driver(\"local\").namespace(\"core\")\n            .forget(\"merchantToken\");\n          $state.go(\"access.signin\");\n          console.group(\"and the status is \" + statusCode);\n          console.warn(JSON.stringify(response, null, 4) + \" token not valid - need to login again\");\n          console.info(\"bye -- see you soon\");\n          console.groupEnd();\n        }\n      }, function(error) {\n        $scope.toggleWizardLoader.showLoader = false;\n        $mdToast.show(\n          $mdToast.simple()\n            .content(\"Error updating \" + fName + \" because \" + JSON.stringify(error, null, 4))\n            .position(\"top right\")\n            .hideDelay(2700)\n        );\n      });\n      \n      /**\n       * update fingerprint location\n       *\n       * @fingerprintId  {int}  passed from $scope.updateFingerprint()\n       * @return  {object}  update fingerprint success or fail\n       */\n      \n      $scope.updateFingerprintLocation = (fingerprintId) => {\n      /**\n       * param passed to function\n       * @fID {string} fingeprintId from API on $scope.saveFingeprint()\n       */\n       let fID                = fingerprintId;  \n       let timeNow            = moment().format(\"YYYY-MM-DD hh:mm:ss\");\n       let fLocationID        = locker.driver(\"session\").namespace(\"fingerprintCreate\").get(\"activeFingerprintLocationId\");\n        \n        if(!shouldSaveLocation){\n          $scope.updateFingerprintStoreTransaction(fID);\n        }else{\n          let fullLocation       = $scope.fingerprintLocationAddresses.selected = [] ?\n               \"ALL\" : $scope.fingerprintLocationAddresses.selected;\n          /**\n           * this is what we send to the API to update offer if already saved\n           * from create screen.\n           *\n           * @fingerprintLocation  {Object}\n           */\n          let fingerprintLocation = {\n            MerchantFingerprintId         : fID,\n            MerchantFingerprintLocationId : fLocationID,\n            Latitude                      : fullLocation.latitude,\n            Longitude                     : fullLocation.longitude,\n            ZipCode                       : \"86336\",\n            Date                          : timeNow,\n            StreetAddress                 : fullLocation.street,\n            City                          : fullLocation.city,\n            State                         : fullLocation.state,\n            Country                       : fullLocation.country,\n            MerchantId                    : merchantMe.merchantId,\n            MerchantToken                 : merchantToken\n          };\n           Fingerprint.updateLocation(fingerprintLocation).then(response => {\n            let statusCode = response.FlikResponse.Status.StatusCode;\n            let statusMessage = response.FlikResponse.Status.StatusMessage;\n            if (statusCode == 0) {\n              let timeNow = moment().format(\"YYYY-MM-DD hh:mm:ss\");\n              let fLocationID = response.FlikResponse.Data.FingerprintLocationUpdate.FingerprintLocationId;\n            \n              console.info( JSON.stringify(fID, null, 4));\n              \n              angular.forEach($rootScope.allData.fingerprints.locations.list, function(location, index){\n                if(location.merchantFingerprintId == fID){\n                  $rootScope.allData.fingerprints.locations[index] = {\n                    merchantFingerprintId         : fID,\n                    merchantFingerprintLocationId : fLocationID,\n                    latitude                      : fullLocation.latitude,\n                    longitude                     : fullLocation.longitude,\n                    zipCode                       : \"86336\",\n                    date                          : timeNow,\n                    streetAddress                 : fullLocation.street,\n                    city                          : fullLocation.city,\n                    state                         : fullLocation.state,\n                    country                       : fullLocation.country,\n                    formattedAddress              : fullLocation.formatted_address\n                  \n                  }\n                }\n              });\n              \n               \n\n              locker.driver(\"session\")\n                .namespace(\"fingerprintCreate\")\n                .put(\"activeFingerprintLocationId\", fLocationID);\n              console.info(\"saved fingerprint Location with ID \" + fLocationID);\n              $scope.updateFingerprintStoreTransaction(fID);\n            } else if (statusCode == 3) {\n              /**\n               * if we reach here merchantToken is no longer valid\n               * we boot user back to signin\n               *\n               * TODO: add modal to reauth without back to signin page\n               */\n              locker.driver(\"local\")\n                .namespace(\"core\")\n                .forget(\"merchantToken\");\n              $state.go(\"access.signin\");\n              console.group(\"and the status is \" + statusCode);\n              console.warn( JSON.stringify(response, null, 4) + \" token not valid - need to login again\" );\n              console.info(\"bye -- see you soon\");\n              console.groupEnd();\n            } else {\n              $scope.toggleWizardLoader.showLoader = false;\n              $mdToast.show(\n                $mdToast.simple()\n                  .content(statusMessage)\n                  .position(\"top right\")\n                  .hideDelay(2700)\n              );\n              console.warn(statusMessage+\" this is the status message\");\n            }\n          }, error => {\n              $scope.toggleWizardLoader.showLoader = false;\n              $mdToast.show(\n                $mdToast.simple()\n                  .content(\"There was an error updating fingerprint location please try again\")\n                  .position(\"top right\")\n                  .hideDelay(2700)\n              );\n              console.warn(\"this is an API error from update fingerprint location\");\n          });\n        \n        }\n        \n//      let fID                     = fingerprintId;\n//      let fLocationID             = locker.driver(\"session\").namespace(\"fingerprintCreate\").get(\"activeFingerprintLocationId\");\n//      let fLocationUUID           = locker.driver(\"session\").namespace(\"fingerprintCreate\").get(\"activeFingerprintLocationUUID\");\n//      let thisFingerprintLocation = locker.driver(\"local\").namespace(\"fingerprintLocations\").get(fLocationUUID);\n//      let timeNow                 = moment().format(\"YYYY-MM-DD hh:mm:ss\");\n     \n     \n      }// location function ending\n      \n      /**\n       * store transaction update\n       *\n       */\n       $scope.updateFingerprintStoreTransaction = fID =>{\n        let timeNow = moment().format(\"YYYY-MM-DD hh:mm:ss\");\n//        let shouldSaveStoreLocation = Object.keys(storeLocation).length > 0;\n        let merchantFingerprintStoreId = locker.driver(\"session\").namespace(\"fingerprintCreate\").get(\"activeFingerprintStoreTransactionId\");\n         \n         if(!shouldSaveStoreTransaction){\n           $scope.updateFingerprintTransaction(fID); \n        }else if(shouldSaveBeaconTransaction){\n          $scope.updateFingerprintBeaconTransaction(fID);\n        }else{\n          let storeUpdateData = $scope.fingerprintStoreAddresses.selected;\n          let updateStore = {\n            MerchantFingerprintStoreId: merchantFingerprintStoreId,\n            FingerprintId: fID,\n            StoreId: storeUpdateData.storeId,\n            Latitude: storeUpdateData.storeLatitude,\n            Longitude: storeUpdateData.storeLongitude,\n            ZipCode: storeUpdateData.storeZipCode,\n            Date: timeNow,\n            StreetAddress: storeUpdateData.storeStreetAddress,\n            State: storeUpdateData.storeState,\n            City: storeUpdateData.storeCity,\n            Country: storeUpdateData.storeCountry,\n            MerchantToken: merchantToken\n          };\n          Fingerprint.storeUpdate(updateStore).then(response => {\n            let statusCode = response.FlikResponse.Status.StatusCode;\n            let statusMessage = response.FlikResponse.Status.StatusMessage;\n            if (statusCode == 0) {\n              let storeTransactionAll = $rootScope.allData.fingerprints.storeTransactions.list;\n              let storeUpdatedData = {\n                merchantFingerprintId: fID,\n                merchantFingerprintStoreId: merchantFingerprintStoreId,\n                storeId: storeUpdateData.storeId,\n                storeLatitude: storeUpdateData.storeLatitude,\n                storeLongitude: storeUpdateData.storeLongitude,\n                storeZipCode: storeUpdateData.storeZipCode,\n                date: timeNow,\n                storeStreetAddress: storeUpdateData.storeStreetAddress,\n                storeState: storeUpdateData.storeState,\n                storeCity: storeUpdateData.storeCity,\n                storeCountry: storeUpdateData.storeCountry\n              };\n              angular.forEach(storeTransactionAll, function(storeInfo, index) {\n                if (merchantFingerprintStoreId == storeInfo.merchantFingerprintStoreId) {\n                  $rootScope.allData.fingerprints.storeTransactions.list[index] = storeUpdatedData;\n                }\n              });\n              $scope.updateFingerprintTransaction(fID);\n            }\n          })\n        \n        }\n       \n        \n     }// strore function ending  \n       \n     \n    /**\n     * update fingerprint transaction\n     *\n     * @fingerprintId  {int}  passed from $scope.updateFingerprintLocation()\n     * @return  {object}  update fingerprint transaction success or fail\n     */\n    $scope.updateFingerprintTransaction = fingerprintId => {\n      /**\n       * param passed to function\n       * @fID {string} fingeprintId from API on $scope.saveFingeprint()\n       */\n      let fID                        = fingerprintId;\n      let fTransactionID             = locker.driver(\"session\").namespace(\"fingerprintCreate\").get(\"activeFingerprintTransactionId\");\n      let fTransactionUUID           = locker.driver(\"session\").namespace(\"fingerprintCreate\").get(\"activeFingerprintTransactionUUID\");\n      let thisFingerprintTransaction = locker.driver(\"local\").namespace(\"fingerprintTransactions\").get(\"fTransactionUUID\");\n      let timeNow                    = moment().format(\"YYYY-MM-DD hh:mm:ss\");\n      \n      if(!shouldSaveTransaction){\n        $scope.updateFingerprintSocialTransaction(fID);\n      \n      }else{\n         /**\n         * this is what we send to the API to update fingerprint transaction if already saved\n         * from create screen.\n         *\n         * @fingerprintTransaction  {Object}\n         */\n          let product                    = $scope.conBuysLists[0].filter.productCat.selected;\n          let productCat                 = product.productCategory;\n         let fingerprintUpdateTransactions = $scope.conBuysLists;\n        fingerprintUpdateTransactions.forEachCat(updateFilter => {\n          let product = Object.keys(updateFilter.filter.productCat.selected).length > 0 ? updateFilter.filter.productCat.selected : \"ALL\";\n          let productDescription = updateFilter.filter;\n          let fingerprintTransaction = {\n            MerchantFingerprintId            : fID,\n            MerchantFingerprintTransactionId : fTransactionID,\n            TransactionDate                  : moment().format(\"YYYY-MM-DD hh:mm:ss\"),\n            ProductId                        : product.productId,\n            ProductName                      : product.productName,\n            ProductQuantity                  : 7,\n            ProductDescription               : product.productDescription,\n            ProductPrice                     : product.price,\n            FinalSalePrice                   : 7,\n            BrandName                        : product.brandName,\n            BrandId                          : product.brandId,\n            Product_SKU_Number               : product.product_SKU_Number,\n            ProductType                      : product.productType,\n            ProductTypeDescription           : product.productTypeDescription,\n            ProductCategory                  : product.productCategory,\n            ProductCategoryDescription       : product.productCategoryDescription,\n            LogicalOperator                  : productDescription.logicOperator,\n            BuyNotBuy                        : productDescription.logicPurchased,\n            MerchantToken                    : merchantToken\n          };\n            Fingerprint.updateTransaction(fingerprintTransaction).then(response => {\n              let statusCode = response.FlikResponse.Status.StatusCode;\n              let statusMessage = response.FlikResponse.Status.StatusMessage;\n              if (statusCode == 0) {\n                let timeNow = moment().format(\"YYYY-MM-DD hh:mm:ss\");\n                fTransactionID = response.FlikResponse.Data.MerchantFingerprintTransaction.MerchantFingerprintTransactionId;\n                console.info( JSON.stringify(fID, null, 4));\n\n//                $scope.toggleWizardLoader.showLoader = false;\n//                $mdToast.show(\n//                  $mdToast.simple()\n//                    .content(\"Fingerprint \" + $scope.fingerprintName + \" and targeting info updated\")\n//                    .position(\"top right\")\n//                    .hideDelay(2700)\n//                );\n                \n                 angular.forEach($rootScope.allData.fingerprints.transactions.list, function(transaction, index){\n                  if(transaction.merchantFingerprintId == fID){\n                    $rootScope.allData.fingerprints.transactions.list[index] = {\n                      merchantFingerprintId            : fID,\n                      merchantFingerprintTransactionId : fTransactionID,\n                      transactionDate                  : moment().format(\"YYYY-MM-DD hh:mm:ss\"),\n                      productId                        : product.productId,\n                      productName                      : product.productName,\n                      productQuantity                  : 7,\n                      productDescription               : product.productDescription,\n                      productPrice                     : product.price,\n                      finalSalePrice                   : 7,\n                      brandName                        : product.brandName,\n                      brandId                          : product.brandId,\n                      product_SKU_Number               : product.product_SKU_Number,\n                      productType                      : product.productType,\n                      productTypeDescription           : product.productTypeDescription,\n                      productCategory                  : product.productCategory,\n                      productCategoryDescription       : product.productCategoryDescription,\n                      logicalOperator                  : productDescription.logicOperator,\n                      buyNotBuy                        : productDescription.logicPurchased\n                    };\n                  }\n                 });\n                locker.driver(\"session\")\n                  .namespace(\"fingerprintCreate\")\n                  .put(\"activeFingerprintTransactionId\", fTransactionID);\n                console.info(\"saved fingerprint Transaction with ID \" + fTransactionID);\n                $scope.updateFingerprintSocialTransaction(fID);\n              } else if (statusCode == 3) {\n                /**\n                 * if we reach here merchantToken is no longer valid\n                 * we boot user back to signin\n                 *\n                 * TODO: add modal to reauth without back to signin page\n                 */\n                locker.driver(\"local\")\n                  .namespace(\"core\")\n                  .forget(\"merchantToken\");\n                $state.go(\"access.signin\");\n                console.group(\"and the status is \" + statusCode);\n                console.warn( JSON.stringify(response, null, 4) + \" token not valid - need to login again\" );\n                console.info(\"bye -- see you soon\");\n                console.groupEnd();\n              } else {\n                $mdToast.show(\n                  $mdToast.simple()\n                    .content(statusMessage)\n                    .position(\"top right\")\n                    .hideDelay(2700)\n                );\n                console.warn(statusMessage+\" this is the status message\");\n              }\n            },error => {\n              $mdToast.show(\n                $mdToast.simple()\n                  .content(statusMessage)\n                  .position(\"top right\")\n                  .hideDelay(2700)\n              );\n              console.warn(\"this is an API error from save fingerprint transaction\");\n          });\n        });\n      \n      }\n     \n     \n      \n    } // transaction function ending\n    \n     $scope.updateFingerprintSocialTransaction = fID => {\n      let fiD                        = fID;\n      let productID                  = locker.driver(\"session\").namespace(\"fingerprintCreate\").get(\"activeFingerprintSocialTransactionId\");\n      let timeNow                    = moment().format(\"YYYY-MM-DD hh:mm:ss\");\n      \n       \n       if(!ShouldSaveSocialTransaction){\n        $scope.updateFingerprintCauseTransaction(fID);\n       \n       }else{\n        let product                    = $scope.conBuysSocialLists[0].sfilter.productCat.selected;\n        let productCat                 = $scope.conBuysSocialLists[0].sfilter.productCat.selected.productCategory;\n        let fingerprintUpdateSocialTransactions = $scope.conBuysSocialLists;\n        let count = 0;\n        fingerprintUpdateSocialTransactions.forEachCat(updateFilter => {\n\n          let updateSocialProduct = {\n            MerchantFingerprintId            : fID,\n            Date                             : timeNow,\n            ProductName                      : Object.keys(updateFilter.sfilter.productName.selected).length > 0 ? updateFilter.sfilter.productName.selected.productName : \"ALL\",\n            BrandName                        : Object.keys(updateFilter.sfilter.productBrand.selected).length > 0 ? updateFilter.sfilter.productBrand.selected.brandName : \"ALL\",\n            ProductType                      : Object.keys(updateFilter.sfilter.productName.selected).length > 0 ? updateFilter.sfilter.productName.selected.productType : \"ALL\",\n            ProductCategory                  : Object.keys(updateFilter.sfilter.productCat.selected).length > 0 ? updateFilter.sfilter.productCat.selected.productCategory : \"ALL\",\n            LogicalOperator                  : updateFilter.sfilter.logicOperator,\n            LikeNotLike                      : updateFilter.sfilter.logicPurchased,\n            MerchantFingerprintProductId     : updateFilter.sfilter.id,\n            MerchantToken                    : merchantToken\n          };\n\n          Fingerprint.updateSocialHistory(updateSocialProduct).then(response => {\n            count++;\n            let statusCode = response.FlikResponse.Status.StatusCode;\n            let statusMessage = response.FlikResponse.Status.StatusMessage;\n            if (statusCode == 0){\n              let timeNow = moment().format(\"YYYY-MM-DD hh:mm:ss\");\n              let sProductID = response.FlikResponse.Data.MerchantFingerprintProductUpdate.MerchantFingerprintProductId;\n              let lengthArray = fingerprintUpdateSocialTransactions.length;\n              angular.forEach($rootScope.allData.fingerprints.socialTransactions.list, function(socialTransaction, index){\n                if(socialTransaction.merchantFingerprintId == fID){\n                  $rootScope.allData.fingerprints.socialTransactions.list[index] = {\n                    merchantFingerprintId        : fID,\n                    merchantFingerprintProductId : updateFilter.sfilter.id,\n                    date                         : moment(updateFilter.sfilter.timeFrames.selected).format(\"YYYY-MM-DD hh:mm:ss\"),\n                    productName                  : Object.keys(updateFilter.sfilter.productName.selected).length > 0 ? updateFilter.sfilter.productName.selected.productName : \"ALL\",\n                    brandName                    : Object.keys(updateFilter.sfilter.productBrand.selected).length > 0 ? updateFilter.sfilter.productBrand.selected.brandName : \"ALL\",\n                    productType                  : Object.keys(updateFilter.sfilter.productName.selected).length > 0 ? updateFilter.sfilter.productName.selected.productType : \"ALL\",\n                    productCategory              : Object.keys(updateFilter.sfilter.productCat.selected).length > 0 ? updateFilter.sfilter.productCat.selected.productCategory : \"ALL\",\n                    logicalOperator              : updateFilter.sfilter.logicOperator,\n                    likeNotLike                  : updateFilter.sfilter.logicPurchased\n                  };\n                }\n              });\n              \n              \n              if (count === fingerprintUpdateSocialTransactions.length) {\n                locker.driver(\"session\")\n                  .namespace(\"fingerprintCreate\")\n                  .put(\"activeFingerprintProductId\", sProductID);\n                $scope.toggleWizardLoader.showLoader = false;\n//                $mdToast.show(\n//                  $mdToast.simple()\n//                    .content(\"fingerprint \" + $scope.fingerprintData.fingerprint[0].fingerprintName + \" and targeting info saved\")\n//                    .position(\"top right\")\n//                    .hideDelay(2700)\n//                );\n              }\n              $scope.updateFingerprintCauseTransaction(fID);\n            } else {\n              $scope.toggleWizardLoader.showLoader = false;\n              $mdToast.show(\n                $mdToast.simple()\n                  .content(statusMessage)\n                  .position(\"top right\")\n                  .hideDelay(2700)\n              );\n            }\n          }, error => {\n              $scope.toggleWizardLoader.showLoader = false;\n              $mdToast.show(\n                $mdToast.simple()\n                  .content(statusMessage)\n                  .position(\"top right\")\n                  .hideDelay(2700)\n              );\n          });\n        });\n       \n       }\n     \n      \n    }// social ending\n     \n     \n    $scope.updateFingerprintCauseTransaction = function(fID) {\n      let timeNow = moment().format(\"YYYY-MM-DD hh:mm:ss\");\n      let fingerprintUpdateCauseTransactions = $scope.conBuysCauseLists;\n      let count = 0;\n      \n      if(!ShouldSaveCauseTransaction){\n        $scope.toggleWizardLoader.showLoader = false;\n        $mdToast.show(\n          $mdToast.simple()\n            .content(\"Fingerprint \" + $scope.fingerprintData.fingerprint[0].fingerprintName + \" with all targeting Updated\")\n            .position(\"top right\")\n            .hideDelay(2700)\n        );\n      }else{\n        fingerprintUpdateCauseTransactions.forEachCat(updateCause => {\n          let updateCauses ={\n              MerchantFingerprintId: fID,\n              Date                        : timeNow,\n              CauseName                   : updateCause.cfilter.causeName.selected.causeName,\n              LogicalOperator             : updateCause.cfilter.logicOperator,\n              LikeNotLike                 : updateCause.cfilter.logicPurchased,\n              MerchantFingerprintCauseId  : updateCause.cfilter.id,\n              MerchantToken               : merchantToken\n          };\n\n          Fingerprint.updateCause(updateCauses).then(response =>{\n\n            count++;\n\n            let statusCode = response.FlikResponse.Status.StatusCode;\n            let statusMessage = response.FlikResponse.Status.StatusMessage;\n            if(statusCode == 0){\n              let timeNow = moment().format(\"YYYY-MM-DD hh:mm:ss\");\n              let cCauseID = response.FlikResponse.Data.MerchantFingerprintCauseUpdate.MerchantFingerprintCauseId;\n              angular.forEach( $rootScope.allData.fingerprints.causeTransactions.list, function(cause, index){\n                if(cause.merchantFingerprintId == fID){\n                  $rootScope.allData.fingerprints.causeTransactions.list[index]={\n                    merchantFingerprintId      : fID,\n                    merchantFingerprintCauseId : cCauseID,\n                    date                       : moment(updateCause.cfilter.timeFrames.selected).format(\"YYYY-MM-DD hh:mm:ss\"),\n                    causeName                  : updateCause.cfilter.causeName.selected.causeName,\n                    logicalOperator            : updateCause.cfilter.logicOperator,\n                    likeNotLike                : updateCause.cfilter.logicPurchased\n                  \n                  };\n                }\n              \n              });\n\n              if (count === fingerprintUpdateCauseTransactions.length) {\n                locker.driver(\"session\")\n                  .namespace(\"fingerprintCreate\")\n                  .put(\"activeFingerprintProductId\", cCauseID);\n                $scope.toggleWizardLoader.showLoader = false;\n                $mdToast.show(\n                  $mdToast.simple()\n                    .content(\"fingerprint \" + $scope.fingerprintData.fingerprint[0].fingerprintName + \" and targeting info updated\")\n                    .position(\"top right\")\n                    .hideDelay(2700)\n                );\n              }\n               \n            } else {\n              $scope.toggleWizardLoader.showLoader = false;\n              $mdToast.show(\n                $mdToast.simple()\n                  .content(statusMessage)\n                  .position(\"top right\")\n                  .hideDelay(2700)\n              );\n            }\n          }, error => {\n            $scope.toggleWizardLoader.showLoader = false;\n            $mdToast.show(\n              $mdToast.simple()\n                .content(\"error saving Fingerprint transaction please try again\")\n                .position(\"top right\")\n                .hideDelay(2700)\n            );\n          });\n      });\n      \n      }\n      \n    }// cause function ending\n    \n     /**\n     *  Beacon fingerprint transaction get updated\n     *\n     */\n\n      $scope.updateFingerprintBeaconTransaction = fID =>{\n        let timeNow = moment().format(\"YYYY-MM-DD hh:mm:ss\");\n        let beaconUpdateData = $scope.fingerprintBeaconAddresses.selected;\n        let storeUpdateData  = $scope.fingerprintStoreAddresses.selected;\n        let merchantFingerprintBeaconId = locker.driver(\"session\").namespace(\"fingerprintCreate\").get(\"activeFingerprintBeaconTransactionId\");\n        let updateBeacon = {\n          MerchantFingerprintBeaconsId  : merchantFingerprintBeaconId,\n          FingerprintId                 : fID,\n          StoreId                       : storeUpdateData.storeId,\n          BeaconUUID                    : beaconUpdateData.beaconUUID,\n          BeaconId                      : beaconUpdateData.beaconId,\n          Latitude                      : storeUpdateData.storeLatitude,\n          Longitude                     : storeUpdateData.storeLongitude,\n          ZipCode                       : storeUpdateData.storeZipCode,\n          Date                          : timeNow,\n          StreetAddress                 : storeUpdateData.storeStreetAddress,\n          State                         : storeUpdateData.storeState,\n          City                          : storeUpdateData.storeCity,\n          Country                       : storeUpdateData.storeCountry,\n          MerchantToken                 : merchantToken\n        };\n\n        Fingerprint.beaconUpdate(updateBeacon).then(response =>{\n          let statusCode = response.FlikResponse.Status.StatusCode;\n          let statusMessage = response.FlikResponse.Status.StatusMessage;\n          if(statusCode == 0){\n            let beaconTransactionAll = $rootScope.allData.fingerprints.beaconTransactions.list;\n            let beaconUpdatedData = {\n              merchantFingerprintId       : fID,\n              merchantFingerprintBeaconId : merchantFingerprintBeaconId,\n              storeId                     : $scope.fingerprintStoreAddresses.selected.storeId,\n              beaconUUID                  : beaconUpdateData.beaconUUID,\n              beaconId                    : beaconUpdateData.beaconId,\n              latitude                    : storeUpdateData.storeLatitude,\n              longitude                   : storeUpdateData.storeLongitude,\n              zipCode                     : storeUpdateData.storeZipCode,\n              date                        : timeNow,\n              streetAddress               : storeUpdateData.storeStreetAddress,\n              state                       : storeUpdateData.storeState,\n              city                        : storeUpdateData.storeCity,\n              country                     : storeUpdateData.storeCountry\n            };\n            angular.forEach(beaconTransactionAll,function(beaconInfo,index){\n              if(merchantFingerprintBeaconId == beaconInfo.merchantFingerprintBeaconId){\n                $rootScope.allData.fingerprints.beaconTransactions.list[index] = beaconUpdatedData;\n              }\n            });\n            $scope.updateFingerprintTransaction(fID);\n          }\n        })\n      }// beacon function end\n\n      \n      \n    }//main function ending\n\n  }]);\n"]}