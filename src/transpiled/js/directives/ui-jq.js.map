{"version":3,"sources":["../../../js/directives/ui-jq.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;AAkBb,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC,CAClC,KAAK,CAAC,YAAY,EAAE,EAAE,CAAC,CACvB,SAAS,CAAC,MAAM,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,qBAAqB,CAAC,UAAU,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE;;AAE5I,SAAO;AACL,YAAQ,EAAE,GAAG;AACb,WAAO,EAAE,SAAS,qBAAqB,CAAC,IAAI,EAAE,MAAM,EAAE;;AAEpD,UAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;AACrE,cAAM,IAAI,KAAK,CAAC,cAAc,GAAG,MAAM,CAAC,IAAI,GAAG,2BAA2B,CAAC,CAAC;OAC7E;AACD,UAAI,OAAO,GAAG,UAAU,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;AAEpD,aAAO,SAAS,mBAAmB,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE;;AAErD,iBAAS,UAAU,GAAE;AACnB,cAAI,WAAW,GAAG,EAAE,CAAC;;;AAGrB,cAAI,KAAK,CAAC,SAAS,EAAE;AACnB,uBAAW,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC;AACvD,gBAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;AACjE,yBAAW,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;aAC9D;WACF,MAAM,IAAI,OAAO,EAAE;AAClB,uBAAW,GAAG,CAAC,OAAO,CAAC,CAAC;WACzB;AACD,iBAAO,WAAW,CAAC;SACpB;;;AAGD,YAAI,KAAK,CAAC,OAAO,IAAI,GAAG,CAAC,EAAE,CAAC,uBAAuB,CAAC,EAAE;AACpD,aAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAW;AAC5B,eAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;WACtB,CAAC,CAAC;SACJ;;;AAGD,iBAAS,UAAU,GAAG;AACpB,kBAAQ,CAAC,YAAW;AAClB,eAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;WAC1C,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;SACd;;AAED,iBAAS,OAAO,GAAE;;AAEhB,cAAI,KAAK,CAAC,SAAS,EAAE;AACnB,iBAAK,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,YAAW;AACvC,wBAAU,EAAE,CAAC;aACd,CAAC,CAAC;WACJ;SACF;;AAED,YAAK,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,EAAG;AAC3B,gBAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,YAAW;AACjD,sBAAU,EAAE,CAAC;AACb,mBAAO,EAAE,CAAC;WACX,CAAC,SAAM,CAAC,YAAW,EAEnB,CAAC,CAAC;SACJ,MAAM;AACL,oBAAU,EAAE,CAAC;AACb,iBAAO,EAAE,CAAC;SACX;OACF,CAAC;KACH;GACF,CAAC;CACH,CAAC,CAAC,CAAC","file":"src/js/directives/ui-jq.js","sourcesContent":["'use strict';\n\n/**\n * 0.1.1\n * General-purpose jQuery wrapper. Simply pass the plugin name as the expression.\n *\n * It is possible to specify a default set of parameters for each jQuery plugin.\n * Under the jq key, namespace each plugin by that which will be passed to ui-jq.\n * Unfortunately, at this time you can only pre-define the first parameter.\n * @example { jq : { datepicker : { showOn:'click' } } }\n *\n * @param ui-jq {string} The $elm.[pluginName]() to call.\n * @param [ui-options] {mixed} Expression to be evaluated and passed as options to the function\n *     Multiple parameters can be separated by commas\n * @param [ui-refresh] {expression} Watch expression and refire plugin on changes\n *\n * @example <input ui-jq=\"datepicker\" ui-options=\"{showOn:'click'},secondParameter,thirdParameter\" ui-refresh=\"iChange\">\n */\nangular.module('ui.jq', ['ui.load']).\n  value('uiJqConfig', {}).\n  directive('uiJq', ['uiJqConfig', 'JQ_CONFIG', 'uiLoad', '$timeout', function uiJqInjectingFunction(uiJqConfig, JQ_CONFIG, uiLoad, $timeout) {\n\n  return {\n    restrict: 'A',\n    compile: function uiJqCompilingFunction(tElm, tAttrs) {\n\n      if (!angular.isFunction(tElm[tAttrs.uiJq]) && !JQ_CONFIG[tAttrs.uiJq]) {\n        throw new Error('ui-jq: The \"' + tAttrs.uiJq + '\" function does not exist');\n      }\n      var options = uiJqConfig && uiJqConfig[tAttrs.uiJq];\n\n      return function uiJqLinkingFunction(scope, elm, attrs) {\n\n        function getOptions(){\n          var linkOptions = [];\n\n          // If ui-options are passed, merge (or override) them onto global defaults and pass to the jQuery method\n          if (attrs.uiOptions) {\n            linkOptions = scope.$eval('[' + attrs.uiOptions + ']');\n            if (angular.isObject(options) && angular.isObject(linkOptions[0])) {\n              linkOptions[0] = angular.extend({}, options, linkOptions[0]);\n            }\n          } else if (options) {\n            linkOptions = [options];\n          }\n          return linkOptions;\n        }\n\n        // If change compatibility is enabled, the form input's \"change\" event will trigger an \"input\" event\n        if (attrs.ngModel && elm.is('select,input,textarea')) {\n          elm.bind('change', function() {\n            elm.trigger('input');\n          });\n        }\n\n        // Call jQuery method and pass relevant options\n        function callPlugin() {\n          $timeout(function() {\n            elm[attrs.uiJq].apply(elm, getOptions());\n          }, 0, false);\n        }\n\n        function refresh(){\n          // If ui-refresh is used, re-fire the the method upon every change\n          if (attrs.uiRefresh) {\n            scope.$watch(attrs.uiRefresh, function() {\n              callPlugin();\n            });\n          }\n        }\n\n        if ( JQ_CONFIG[attrs.uiJq] ) {\n          uiLoad.load(JQ_CONFIG[attrs.uiJq]).then(function() {\n            callPlugin();\n            refresh();\n          }).catch(function() {\n\n          });\n        } else {\n          callPlugin();\n          refresh();\n        }\n      };\n    }\n  };\n}]);\n"]}