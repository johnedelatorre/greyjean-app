{"version":3,"sources":["../../../js/directives/ui-validate.js"],"names":[],"mappings":"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","file":"src/js/directives/ui-validate.js","sourcesContent":["'use strict';\n\n/**\n * General-purpose validator for ngModel.\n * angular.js comes with several built-in validation mechanism for input fields (ngRequired, ngPattern etc.) but using\n * an arbitrary validation function requires creation of a custom formatters and / or parsers.\n * The ui-validate directive makes it easy to use any function(s) defined in scope as a validator function(s).\n * A validator function will trigger validation on both model and input changes.\n *\n * @example <input ui-validate=\" 'myValidatorFunction($value)' \">\n * @example <input ui-validate=\"{ foo : '$value > anotherModel', bar : 'validateFoo($value)' }\">\n * @example <input ui-validate=\"{ foo : '$value > anotherModel' }\" ui-validate-watch=\" 'anotherModel' \">\n * @example <input ui-validate=\"{ foo : '$value > anotherModel', bar : 'validateFoo($value)' }\" ui-validate-watch=\" { foo : 'anotherModel' } \">\n *\n * @param ui-validate {string|object literal} If strings is passed it should be a scope's function to be used as a validator.\n * If an object literal is passed a key denotes a validation error key while a value should be a validator function.\n * In both cases validator function should take a value to validate as its argument and should return true/false indicating a validation result.\n */\nangular.module('ui.validate',[]).directive('uiValidate', function () {\n\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function (scope, elm, attrs, ctrl) {\n      var validateFn, validators = {},\n          validateExpr = scope.$eval(attrs.uiValidate);\n\n      if (!validateExpr){ return;}\n\n      if (angular.isString(validateExpr)) {\n        validateExpr = { validator: validateExpr };\n      }\n\n      angular.forEach(validateExpr, function (exprssn, key) {\n        validateFn = function (valueToValidate) {\n          var expression = scope.$eval(exprssn, { '$value' : valueToValidate });\n          if (angular.isObject(expression) && angular.isFunction(expression.then)) {\n            // expression is a promise\n            expression.then(function(){\n              ctrl.$setValidity(key, true);\n            }, function(){\n              ctrl.$setValidity(key, false);\n            });\n            return valueToValidate;\n          } else if (expression) {\n            // expression is true\n            ctrl.$setValidity(key, true);\n            return valueToValidate;\n          } else {\n            // expression is false\n            ctrl.$setValidity(key, false);\n            return valueToValidate;\n          }\n        };\n        validators[key] = validateFn;\n        ctrl.$formatters.push(validateFn);\n        ctrl.$parsers.push(validateFn);\n      });\n\n      function apply_watch(watch)\n      {\n          //string - update all validators on expression change\n          if (angular.isString(watch))\n          {\n              scope.$watch(watch, function(){\n                  angular.forEach(validators, function(validatorFn){\n                      validatorFn(ctrl.$modelValue);\n                  });\n              });\n              return;\n          }\n\n          //array - update all validators on change of any expression\n          if (angular.isArray(watch))\n          {\n              angular.forEach(watch, function(expression){\n                  scope.$watch(expression, function()\n                  {\n                      angular.forEach(validators, function(validatorFn){\n                          validatorFn(ctrl.$modelValue);\n                      });\n                  });\n              });\n              return;\n          }\n\n          //object - update appropriate validator\n          if (angular.isObject(watch))\n          {\n              angular.forEach(watch, function(expression, validatorKey)\n              {\n                  //value is string - look after one expression\n                  if (angular.isString(expression))\n                  {\n                      scope.$watch(expression, function(){\n                          validators[validatorKey](ctrl.$modelValue);\n                      });\n                  }\n\n                  //value is array - look after all expressions in array\n                  if (angular.isArray(expression))\n                  {\n                      angular.forEach(expression, function(intExpression)\n                      {\n                          scope.$watch(intExpression, function(){\n                              validators[validatorKey](ctrl.$modelValue);\n                          });\n                      });\n                  }\n              });\n          }\n      }\n      // Support for ui-validate-watch\n      if (attrs.uiValidateWatch){\n          apply_watch( scope.$eval(attrs.uiValidateWatch) );\n      }\n    }\n  };\n});\n"]}