{"version":3,"sources":["../../../js/factories/fingerprint.js"],"names":[],"mappings":"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","file":"fingerprint.js","sourcesContent":["\"use strict\";\n\nangular.module(\"app\")\n.factory(\"Fingerprint\", [\"Restangular\",\"$q\",\n  function(               Restangular,$q){\n\n    /**\n     * Our Restangular urls for Fingerprint factory\n     */\n    let rFingerprintCreate                    = Restangular.all(\"merchant/fingerprint/new\");\n    let rFingerprintUpdate                    = Restangular.all(\"merchant/fingerprint/update\");\n    let rFingerprintTrash                     = Restangular.all(\"merchant/fingerprint/delete\");\n    let rFingerprintGetOne                    = Restangular.all(\"merchant/fingerprint/get\");\n    let rFingerprintGetAll                    = Restangular.all(\"merchant/fingerprint/all\");\n    let rFingerprintLocationCreate            = Restangular.all(\"merchant/fingerprint/location/new\");\n    let rFingerprintLocationUpdate            = Restangular.all(\"merchant/fingerprint/location/update\");\n    let rFingerprintLocationTrash             = Restangular.all(\"merchant/fingerprint/location/delete\");\n    let rFingerprintLocationGetOne            = Restangular.all(\"merchant/fingerprint/location/get\");\n    let rFingerprintLocationGetAll            = Restangular.all(\"merchant/fingerprint/location/all\");\n    let rFingerprintTransactionCreate         = Restangular.all(\"merchant/fingerprint/transactions/new\");\n    let rFingerprintTransactionUpdate         = Restangular.all(\"merchant/fingerprint/transactions/update\");\n    let rFingerprintTransactionTrash          = Restangular.all(\"merchant/fingerprint/transactions/delete\");\n    let rFingerprintTransactionGetOne         = Restangular.all(\"merchant/fingerprint/transactions/get\");\n    let rFingerprintTransactionGetAll         = Restangular.all(\"merchant/fingerprint/transactions/all\");\n    let rFingerprintSocialSave                = Restangular.all(\"merchant/fingerprint/product/new \");\n    let rFingerprintSocialUpdate              = Restangular.all(\"merchant/fingerprint/product/update\");\n    let rFingerprintProductDelete             = Restangular.all(\"merchant/fingerprint/product/delete\");\n    let rFingerprintSocialData                = Restangular.all(\"merchant/fingerprint/product/all\");\n    let rFingerprintGetAllData                = Restangular.all(\"merchant/fingerprint/alls\");\n    let rFingerprintDeleteAll                 = Restangular.all(\"merchant/fingerprint/product/deleteAll\");\n    let rFingerprintCauseSave                 = Restangular.all(\"merchant/fingerprint/cause/new\");\n    let rFingerprintUpdateCause               = Restangular.all(\"merchant/fingerprint/cause/update\");\n    let rFingerprintCauseGet                  = Restangular.all(\"merchant/fingerprint/cause/all\");\n    let rFingerprintDeleteCause               = Restangular.all(\"merchant/fingerprint/cause/deleteAll\")\n    let rFingerprintBeaconAll\t\t\t\t  = Restangular.all(\"merchant/fingerprint/beacons/getAll\");\n    let rFingerprintBeaconSave                = Restangular.all(\"merchant/fingerprint/beacons/new\");\n    let rFingerprintBeaconUpdate              = Restangular.all(\"merchant/fingerprint/beacons/update\");\n    let rFingerprintStoreSave                 = Restangular.all(\"merchant/fingerprint/store/new\");\n    let rFingerprintStoreUpdate               = Restangular.all(\"merchant/fingerprint/store/update\");\n    let rFingerprintStoreGetAll               = Restangular.all(\"merchant/fingerprint/store/getAll\");\n      let rFingerprintPaginatedData = Restangular.all(\"merchant/fingerprint/all/number\");\n\nRestangular.setBaseUrl('http://66.228.114.178/genie/api/');\n\n      var fingerprintAllData = {};\n      var fingerprintBeaconsAllData = {};\n      var fingerprintCausesAllData = {};\n      var fingerprintLocationsAllData = {};\n      var fingerprintPaginateAllData = {};\n      var fingerprintTransactionsAllData = {};\n      var fingerprintProductsAllData = {};\n\n    return {\n      /**\n       * Creates a fingerprint\n       *\n       * @fingerprintInfo   {object}   info from $scope to create fingerprint\n       *\n       * @return {object}   Restangularized response from API\n       */\n      create: fingerprintInfo => {\n        return rFingerprintCreate.post(fingerprintInfo);\n      },\n      /**\n       * Updates a fingerprint\n       *\n       * @fingerprintInfo   {object}   info from $scope to update fingerprint\n       *\n       * @return {object}   Restangularized response from API\n       */\n      update: fingerprintInfo => {\n        return rFingerprintUpdate.post(fingerprintInfo);\n      },\n      /**\n       * Deletes a fingerprint\n       *\n       * @fingerprintToTrash    {object}    fingerprintId from $scope to delete fingerprint\n       *\n       * @return {object}   Restangularized response from API\n       */\n      trash: fingerprintToTrash => {\n        return rFingerprintTrash.post(fingerprintToTrash);\n      },\n      /**\n       * Fetches one fingerprint for op merchant\n       *\n       * @fingerprintToGet  {object}    fingerprintId from $scope to retrieve fingerprint from API\n       *\n       * @return {object}   Restangularized response from API\n       */\n      getOne: fingerprintToGet => {\n        return rFingerprintGetOne.post(fingerprintToGet);\n      },\n      /**\n       * Fetches all fingerprints for op merchant\n       *\n       * @merchantToken     {object}    merchantToken from which to fetch all fingerprints\n       *\n       * @return {object}   Restangularized response from APId\n       */\n      getAll: merchantToken => {\n        return rFingerprintGetAll.post(merchantToken);\n      },\n      /**\n       * Creates a fingerprint location\n       *\n       * @fingerprintLocationInfo   {object}    info from $scope to create fingerprint location\n       *\n       * @return {object}   Restangularized response from API\n       */\n      createLocation: fingerprintLocationInfo => {\n        return rFingerprintLocationCreate.post(fingerprintLocationInfo);\n      },\n      /**\n       * Updates a fingerprint location\n       *\n       * @fingerprintLocationInfo   {object}    info from $scope to update fingerprint location\n       *\n       * @return {object}   Restangularized response from API\n       */\n      updateLocation: fingerprintLocationInfo => {\n        return rFingerprintLocationUpdate.post(fingerprintLocationInfo);\n      },\n      /**\n       * Deletes a fingerprint location\n       *\n       * @fingerprintLocationToTrash    {object}    fingerprintLocationId from $scope to delete fingerprint location\n       *\n       * @return {object}   Restangularized response from API\n       */\n      trashLocation: fingerprintLocationToTrash => {\n        return rFingerprintLocationTrash.post(fingerprintLocationToTrash);\n      },\n      /**\n       * Fetches one fingerprint location for op merchant\n       *\n       * @fingerprintLocationToGet    {object}    fingerprintLocationId from $scope to retrieve fingerprint location from API\n       *\n       * @return {object}   Restangularized response from API\n       */\n      getOneLocation: fingerprintLocationToGet => {\n        return rFingerprintLocationGetOne.post(fingerprintLocationToGet);\n      },\n      /**\n       * Fetches all fingerprint locations for op merchant\n       *\n       * @merchantToken     {object}    merchantToken from which to fetch all fingerprints\n       *\n       * @return {object}   Restangularized response from APId\n       */\n      getAllLocation: merchantToken => {\n        return rFingerprintLocationGetAll.post(merchantToken);\n      },\n      /**\n       * Creates a fingerprint transaction\n       *\n       * @fingerprintTransactionInfo   {object}    info from $scope to create fingerprint transaction\n       *\n       * @return {object}   Restangularized response from API\n       */\n      createTransaction: fingerprintTransactionInfo => {\n        return rFingerprintTransactionCreate.post(fingerprintTransactionInfo);\n      },\n      /**\n       * Updates a fingerprint transaction\n       *\n       * @fingerprintTransactionInfo   {object}    info from $scope to update fingerprint transaction\n       *\n       * @return {object}   Restangularized response from API\n       */\n      updateTransaction: fingerprintTransactionInfo => {\n        return rFingerprintTransactionUpdate.post(fingerprintTransactionInfo);\n      },\n      /**\n       * Deletes a fingerprint transaction\n       *\n       * @fingerprintTransactionToTrash    {object}    fingerprintTransactionId from $scope to delete fingerprint transaction\n       *\n       * @return {object}   Restangularized response from API\n       */\n      trashTransaction: fingerprintTransactionToTrash => {\n        return rFingerprintTransactionTrash.post(fingerprintTransactionToTrash);\n      },\n      /**\n       * Fetches one fingerprint transaction for op merchant\n       *\n       * @fingerprintTransactionToGet    {object}    fingerprintTransactionId from $scope to retrieve fingerprint transaction from API\n       *\n       * @return {object}   Restangularized response from API\n       */\n      getOneTransaction: fingerprintTransactionToGet => {\n        return rFingerprintTransactionGetOne.post(fingerprintTransactionToGet);\n      },\n      /**\n       * Fetches all fingerprint transactions for op merchant\n       *\n       * @merchantToken     {object}    merchantToken from which to fetch all transactions\n       *\n       * @return {object}   Restangularized response from APId\n       */\n      getAllTransaction: merchantToken => {\n        return rFingerprintTransactionGetAll.post(merchantToken);\n      },\n      getAllData: merchantToken => {\n        return rFingerprintGetAllData.post(merchantToken);\n      },\n      saveSocialHistory: merchantToken => {\n        return rFingerprintSocialSave.post(merchantToken);\n      },\n      getSocialHistory: merchantToken =>{\n        return rFingerprintSocialData.post(merchantToken);\n      },\n      updateSocialHistory:merchantToken =>{\n        return rFingerprintSocialUpdate.post(merchantToken);\n      },\n      deleteProduct: merchantToken =>{\n        return rFingerprintDeleteAll.post(merchantToken);\n      },\n      saveCauseHistory: merchantToken =>{\n        return rFingerprintCauseSave.post(merchantToken);\n      },\n\n      updateCause: merchantToken =>{\n        return rFingerprintUpdateCause.post(merchantToken);\n      },\n      causeGet: merchantToken =>{\n        return rFingerprintCauseGet.post(merchantToken);\n      },\n      deleteCause: merchantToken =>{\n        return rFingerprintDeleteCause.post(merchantToken);\n      },\n      beaconGetAll: merchantToken =>{\n        return rFingerprintBeaconAll.post(merchantToken);\n      },\n\n      beaconSave: merchantToken =>{\n        return rFingerprintBeaconSave.post(merchantToken);\n      },\n      /**\n       * save the selected store from pull down\n       */\n      storeSave: merchantToken =>{\n        return rFingerprintStoreSave.post(merchantToken);\n      },\n\n      /**\n       *  update store that update store data\n       *\n       */\n      storeUpdate: storeInfo =>{\n        return rFingerprintStoreUpdate.post(storeInfo);\n      },\n\n      /**\n       * update beacon that update beacon through rest API call\n       *\n       */\n      beaconUpdate: beaconInfo =>{\n        return rFingerprintBeaconUpdate.post(beaconInfo);\n      },\n      /**\n       * Get all the fingerprint stores and that is used in config file\n       *\n       */\n      storeGetAll:storeInfo =>{\n        return rFingerprintStoreGetAll.post(storeInfo);\n      },\n\n      FingerprintAllData: merchantToken =>{\n          let mPass = {\n              MerchantToken: merchantToken\n          }\n    return $q(function(resolve, reject) {\n        rFingerprintGetAllData.post(mPass).then(response => {\n            console.log(\"after api call\");\n        fingerprintBeaconsAllData = response.FlikResponse.Data.FingerprintBeaconsAll;\n        fingerprintCausesAllData = response.FlikResponse.Data.FingerprintCauseAll;\n        fingerprintTransactionsAllData = response.FlikResponse.Data.FingerprintTransactionAll;\n        fingerprintLocationsAllData = response.FlikResponse.Data.FingerprintLocationAll;\n        fingerprintProductsAllData = response.FlikResponse.Data.FingerprintProductAll;\n        fingerprintAllData = response.FlikResponse.Data;\n        console.log(response.FlikResponse.Data);\n        console.log(\" in api transaction\");\n        console.log(fingerprintTransactionsAllData);\n        //$rootScope.allData.campaigns.list = campaignList;\n        //$rootScope.allData.campaigns.count = campaignList.length;\n\n        resolve(fingerprintAllData);\n    }, function (err) {\n        error = err;\n        reject(error);\n    });\n});\n\n       //return fingerprintAllData;\n      },\n      getFingerprintAllData: function() {\n        return fingerprintAllData;\n      },\ngetFingerprintBeaconsAllData: function() {\n    return fingerprintBeaconsAllData;\n},\ngetFingerprintCausesAllData: function() {\n    return fingerprintCausesAllData;\n},\ngetFingerprintTransactionsAllData: function() {\n    console.log(\" in return transaction\");\n    console.log(fingerprintTransactionsAllData);\n    return fingerprintTransactionsAllData;\n},\ngetFingerprintLocationsAllData: function() {\n    return fingerprintLocationsAllData;\n},\ngetFingerprintProductsAllData: function() {\n    return fingerprintProductsAllData;\n},\nFingerprintPaginateAllData: function(start,limit,merchantToken) {\n\n    let mPass = {\n        StartLimit: start,\n        EndLimit: limit,\n        MerchantToken: merchantToken\n    }\n    return $q(function(resolve, reject) {\n        console.log(\"before api call\");\n        rFingerprintPaginatedData.post(mPass).then(response => {\n            console.log(\"response is\");\n        fingerprintPaginateAllData = response.FlikResponse.Data.MerchantFingerprintAll.FingerprintList;\n\n        //$rootScope.allData.campaigns.list = campaignList;\n        //$rootScope.allData.campaigns.count = campaignList.length;\n\n        resolve(fingerprintPaginateAllData);\n    },function(err){\n        console.log(err);\n        error = err;\n        reject(error);\n    });\n});\n//return fingerprintAllData;\n},\ngetFingerprintPaginateAllData: function() {\n    return fingerprintPaginateAllData;\n}\n\n};\n}]);\n"]}