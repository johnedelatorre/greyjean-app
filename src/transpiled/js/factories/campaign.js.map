{"version":3,"sources":["../../../js/factories/campaign.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CACpB,OAAO,CAAC,UAAU,EAAE,CAAC,aAAa,EAAC,IAAI,EACtC,UAAqB,WAAW,EAAC,EAAE,EAAC;;;;;AAKlC,MAAI,eAAe,GAAG,WAAW,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;AAC/D,MAAI,eAAe,GAAG,WAAW,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;AAClE,MAAI,cAAc,GAAI,WAAW,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;AAClE,MAAI,eAAe,GAAG,WAAW,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;AAC/D,MAAI,eAAe,GAAG,WAAW,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;AAC/D,MAAI,cAAc,GAAG,WAAW,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;AACpE,MAAI,mBAAmB,GAAG,WAAW,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;AAClF,MAAI,qBAAqB,GAAG,WAAW,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;AAC7F,MAAI,iBAAiB,GAAG,WAAW,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;AACtE,MAAI,yBAAyB,GAAE,WAAW,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;AACpF,MAAI,eAAe,GAAG,EAAE,CAAC;AACzB,aAAW,CAAC,UAAU,CAAC,kCAAkC,CAAC,CAAC;;AAE7D,SAAO;;;;;;;;AAQL,UAAM,EAAE,gBAAA,YAAY,EAAI;AACtB,aAAO,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KAC3C;;;;;;;;AAQD,UAAM,EAAE,gBAAA,YAAY,EAAI;AACtB,aAAO,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KAC3C;;;;;;;;AAQD,SAAK,EAAE,eAAA,eAAe,EAAI;AACxB,aAAO,cAAc,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;KAC7C;;;;;;;;AAQD,UAAM,EAAE,gBAAA,aAAa,EAAI;AACvB,aAAO,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;KAC5C;;;;;;;;AAQD,UAAM,EAAE,gBAAA,aAAa,EAAI;AACvB,aAAO,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;KAC5C;;AAED,cAAU,EAAE,oBAAA,QAAQ,EAAI;AACtB,aAAO,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC3C;;AAED,gBAAY,EAAE,sBAAA,YAAY,EAAG;AAC3B,aAAO,qBAAqB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KACjD;;AAED,wBAAoB,EAAE,8BAAA,YAAY,EAAG;AACnC,aAAO,qBAAqB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KACjD;;AAEF,sBAAkB,EAAE,4BAAA,gBAAgB,EAAG;AACrC,aAAO,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;KAClD;;AAEA,iBAAa,EAAE,uBAAA,YAAY,EAAG;AAC5B,aAAO,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KAC3C;;AAED,4BAAwB,EAAE,kCAAA,WAAW,EAAG;AACxC,aAAO,yBAAyB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KACnD;AACJ,mBAAe,EAAE,yBAAA,aAAa,EAAG;AAC7B,UAAI,KAAK,GAAG;AACR,qBAAa,EAAE,aAAa;OAC/B,CAAA;AACD,aAAO,EAAE,CAAC,UAAS,OAAO,EAAE,MAAM,EAAE;AAChC,uBAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ,EAAI;AACzC,iBAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;AAClC,yBAAe,GAAG,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC;;;;AAI3E,iBAAO,CAAC,eAAe,CAAC,CAAC;SAC5B,EAAE,UAAU,GAAG,EAAE;AACd,eAAK,GAAG,GAAG,CAAC;AACZ,gBAAM,CAAC,KAAK,CAAC,CAAC;SACjB,CAAC,CAAC;OACN,CAAC,CAAC;;;KAGF;AACD,sBAAkB,EAAE,8BAAW;AAC3B,aAAO,eAAe,CAAC;KAC1B;GACI,CAAC;CACL,CAAC,CAAC,CAAC","file":"campaign.js","sourcesContent":["'use strict';\n\nangular.module('app')\n.factory('Campaign', [\"Restangular\",\"$q\",\n  function(            Restangular,$q){\n\n    /**\n     * Our Restangular urls for Campaign factory\n     */\n    let rCampaignCreate = Restangular.all('merchant/campaign/new');\n    let rCampaignUpdate = Restangular.all('merchant/campaign/update');\n    let rCampaignTrash  = Restangular.all('merchant/campaign/delete');\n    let rCampaignGetOne = Restangular.all('merchant/campaign/get');\n    let rCampaignGetAll = Restangular.all('merchant/campaign/all');\n    let rCampaignEmail = Restangular.all('merchant/campaign/email/new');\n    let rCampaignSocialPush = Restangular.all('merchant/campaign/social_twitter/new');\n    let rCampaignExternalPush = Restangular.all('merchant/campaign/social_twitter_external/new');\n    let rCampaignActivate = Restangular.all('merchant/campaign/activate');\n    let rCampaignCalculateOptimal= Restangular.all('merchant/calculate/optimal/campaign');\n      var campaignAllData = {};\n      Restangular.setBaseUrl('http://66.228.114.178/genie/api/');\n\n    return {\n      /**\n       * Creates a campaign\n       *\n       * @campaignInfo  {object}   info from $scope to create campaign\n       *\n       * @return {object}   Restangularized response from API\n       */\n      create: campaignInfo => {\n        return rCampaignCreate.post(campaignInfo);\n      },\n      /**\n       * Updates a campaign\n       *\n       * @campaignInfo  {object}   info from $scope to update campaign\n       *\n       * @return {object}   Restangularized response from API\n       */\n      update: campaignInfo => {\n        return rCampaignUpdate.post(campaignInfo);\n      },\n      /**\n       * Deletes a campaign\n       *\n       * @campaignToDelete  {object}    campaignId from $scope to delete campaign\n       *\n       * @return {object}   Restangularized response from API\n       */\n      trash: campaignToTrash => {\n        return rCampaignTrash.post(campaignToTrash);\n      },\n      /**\n       * Fetches one campaign for op merchant\n       *\n       * @campaignToGet  {object}    campaignId from $scope to retrieve campaign from API\n       *\n       * @return {object}   Restangularized response from API\n       */\n      getOne: campaignToGet => {\n        return rCampaignGetOne.post(campaignToGet);\n      },\n      /**\n       * Fetches all campaigns for op merchant\n       *\n       * @merchantToken     {object}    merchantToken from which to fetch all campaigns\n       *\n       * @return {object}   Restangularized response from APId\n       */\n      getAll: merchantToken => {\n        return rCampaignGetAll.post(merchantToken);\n      },\n\n      socialPush: campaign => {\n        return rCampaignSocialPush.post(campaign);\n      },\n\n      externalPush: campaignInfo =>{\n        return rCampaignExternalPush.post(campaignInfo);\n      },\n\n      activateExternalPush: campaignInfo =>{\n        return rCampaignExternalPush.post(campaignInfo);\n      },\n\n     activateDeactivate: campaignActivate =>{\n       return rCampaignActivate.post(campaignActivate);\n    },\n\n     emailCampaign: campaignInfo =>{\n       return rCampaignEmail.post(campaignInfo);\n    },\n\n    calculateOptimalCampaign: productData =>{\n    return rCampaignCalculateOptimal.post(productData);\n   },\nCampaignAllData: merchantToken =>{\n    let mPass = {\n        MerchantToken: merchantToken\n    }\n    return $q(function(resolve, reject) {\n        rCampaignGetAll.post(mPass).then(response => {\n            console.log(\"after api call\");\n        campaignAllData = response.FlikResponse.Data.MerchantCampaign.CampaignList;\n        //$rootScope.allData.campaigns.list = campaignList;\n        //$rootScope.allData.campaigns.count = campaignList.length;\n\n        resolve(campaignAllData);\n    }, function (err) {\n        error = err;\n        reject(error);\n    });\n});\n\n//return fingerprintAllData;\n},\ngetCampaignAllData: function() {\n    return campaignAllData;\n},\n    };\n}]);\n"]}