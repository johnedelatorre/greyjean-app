{"version":3,"sources":["../../../js/factories/auth.js"],"names":[],"mappings":"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","file":"src/js/factories/auth.js","sourcesContent":["'use strict';\n\nangular.module('app')\n.factory('Auth',[\"$state\", \"$q\", \"locker\", \"Restangular\",\n  function(       $state,   $q,   locker,   Restangular){\n\n    /**\n     * our Restangular urls for Auth factory\n     */\n    var rAuthMerchant            = Restangular.all('auth/merchant');\n    var rAuthCheck               = Restangular.all('auth/isActive');\n    var rAuthLogout              = Restangular.all('auth/logOut');\n    var rMerchantNew             = Restangular.all('merchant/new');\n    var rMerchantMe              = Restangular.all('merchant/me');\n    var rMerchantForgetPassword  = Restangular.all('merchant/newpassword');\n\n    return {\n      isLoggedIn: () => {\n        var deferred = $q.defer();\n        if (!locker.driver('local').namespace('core').has('merchantToken')) {\n          return false\n        } else {\n          var merchantToken = locker.driver('local').namespace('core').get('merchantToken');\n        }\n        var token = {\n              tokenKey: merchantToken\n            }\n        rAuthCheck.post(token)\n          .then(function(response) {\n            var statusCode = response.FlikResponse.Status.StatusCode;\n            if (statusCode == 0) {\n              console.warn('and the status is '+statusCode);\n              console.info( 'good token --- \\n' + locker.driver('local').namespace('core').get('merchantToken'));\n              deferred.resolve(response);\n            } else if (statusCode == 1) {\n              $state.go('access.signin');\n              console.group(\"and the status is %i\", statusCode);\n              console.warn(JSON.stringify(response, null, 4)+' token not valid - need to login again' );\n              console.groupEnd();\n              $state.go('access.signin');\n              deferred.reject(response);\n            }\n          }, function(error){\n            // var errorCode = error.FlikResponse.Status.StatusCode\n            console.error( 'cannot validate token -- the error is ' + JSON.stringify(error, null, 4));\n            // Raven.captureMessage('API is giving error for checkAuth with error code ' + JSON.stringify(errorCode, null, 4));\n            $state.go('access.signin');\n            deferred.reject(error);\n          });\n        return deferred.promise;\n      },\n      login: function(merchantCreds) {\n        return rAuthMerchant.post(merchantCreds);\n      },\n      getMe: merchantToken => {\n        var token = {\n              MerchantToken: merchantToken\n            };\n        return rMerchantMe.post(token);\n      },\n      logout: merchantToken => {\n        var token = {\n              tokenKey: merchantToken\n            };\n        return rAuthLogout.post(token);\n      },\n      signup: merchantInfo => {\n        return rMerchantNew.post(merchantInfo);\n      },\n    /**\n     * Forget password restangular Api call that return password of merchant.\n     *\n     */\n      newPassword: emailId =>{\n        return rMerchantForgetPassword.post(emailId);\n      }\n    };\n}]);\n"]}